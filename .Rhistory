data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
cacheSolve (X)
set.seed(1)
x <- matrix(rnorm(100), 10, 10)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
(X <- makeCacheMatrix(x))
X[1]
X[2]
X[3]
X[4]
X[5]
str(X)
getinverse(x)
ls()
x
X
set.seed(1)
x <- matrix(rnorm(100), 10, 10)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
(X <- makeCacheMatrix(x))
# This function produces the inverse of the output from makeCacheMatrix.
# First it checks to see if the inverse has already been calculated and cached.
# If so, it retrieves the inverse from the cache, skips the computation and
# prints a message to that effect.
# Otherwise, it calculates the inverse of the matrix and sets the value of the
# inverse in the cache using the setinverse function.
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
#                message("getting cached inverse")
print("getting cached inverse")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
C <- cacheSolve (X)
C
x
C - solve(x)
x <- c(!:20)
x <- c(1:20)
makeVector <- function(x = numeric()) {
x <- c(1:20)
x
x <- c(1:20)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
X <- makeVector(x)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(X)
ls()
x
X
cachemean(X)
set.seed(1)
x <- matrix(rnorm(100), 10, 10)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
X <- makeCacheMatrix(x)
# This function produces the inverse of the output from makeCacheMatrix.
# First it checks to see if the inverse has already been calculated and cached.
# If so, it retrieves the inverse from the cache, skips the computation and
# prints a message to that effect.
# Otherwise, it calculates the inverse of the matrix and sets the value of the
# inverse in the cache using the setinverse function.
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached inverse")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
cacheSolve(X) - solve(x)
X
cacheSolve(X)
cacheSolve(X)
# m <- NULL
cacheSolve(X)
m <- NULL
cacheSolve(X)
# This program will illustrate how to use R's caching ability to store the results of
# potentially time-consuming operations and then retrieve these results from the cache
# in lieu of repeating the resource-intensive computation.  We will illustrate this in
# the instance of determining a matrix inverse.
# This first function creates a list containing a function to:
# * set the value of the given matrix
# * get the value of this matrix
# * set the inverse of this matrix
# * get the inverse of this matrix
set.seed(1)
x <- matrix(rnorm(100), 10, 10)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,  setinverse = setinverse, getinverse = getinverse)
}
X <- makeCacheMatrix(x)
# This function produces the inverse of the output from makeCacheMatrix.
# First it checks to see if the inverse has already been calculated and cached.
# If so, it retrieves the inverse from the cache, skips the computation and, when
# run interactively, prints a message to that effect.
# Otherwise, it calculates the inverse of the matrix and sets the value of the
# inverse in the cache using the setinverse function.
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached inverse")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
cacheSolve(X) - solve(x)
# This program will illustrate how to use R's caching ability to store the results of
# potentially time-consuming operations and then retrieve these results from the cache
# in lieu of repeating the resource-intensive computation.  We will illustrate this in
# the instance of determining a matrix inverse.
# This first function creates a list containing a function to:
# * set the value of the given matrix
# * get the value of this matrix
# * set the inverse of this matrix
# * get the inverse of this matrix
set.seed(1)
x <- matrix(rnorm(100), 10, 10)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,  setinverse = setinverse, getinverse = getinverse)
}
X <- makeCacheMatrix(x)
print(X)
# This program will illustrate how to use R's caching ability to store the results of
# potentially time-consuming operations and then retrieve these results from the cache
# in lieu of repeating the resource-intensive computation.  We will illustrate this in
# the instance of determining a matrix inverse.
# This first function creates a list containing a function to:
# * set the value of the given matrix
# * get the value of this matrix
# * set the inverse of this matrix
# * get the inverse of this matrix
set.seed(1)
x <- matrix(rnorm(100), 10, 10)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,  setinverse = setinverse, getinverse = getinverse)
}
X <- makeCacheMatrix(x)
#print(X)
print(m)
return
set.seed(1)
x <- matrix(rnorm(100), 10, 10)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,  setinverse = setinverse, getinverse = getinverse)
}
X <- makeCacheMatrix(x)
#print(X)
print(m)
return
# This function produces the inverse of the output from makeCacheMatrix.
# First it checks to see if the inverse has already been calculated and cached.
# If so, it retrieves the inverse from the cache, skips the computation and, when
# run interactively, prints a message to that effect.
# Otherwise, it calculates the inverse of the matrix and sets the value of the
# inverse in the cache using the setinverse function.
cacheSolve <- function(x, ...) {
m <- x$getinverse()
print(m)
if(!is.null(m)) {
message("getting cached inverse")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
# This program will illustrate how to use R's caching ability to store the results of
# potentially time-consuming operations and then retrieve these results from the cache
# in lieu of repeating the resource-intensive computation.  We will illustrate this in
# the instance of determining a matrix inverse.
# This first function creates a list containing a function to:
# * set the value of the given matrix
# * get the value of this matrix
# * set the inverse of this matrix
# * get the inverse of this matrix
set.seed(1)
x <- matrix(rnorm(100), 10, 10)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,  setsolve = setsolve, getsolve = getsolve)
}
X <- makeCacheMatrix(x)
# This function produces the inverse of the output from makeCacheMatrix.
# First it checks to see if the inverse has already been calculated and cached.
# If so, it retrieves the inverse from the cache, skips the computation and, when
# run interactively, prints a message to that effect.
# Otherwise, it calculates the inverse of the matrix and sets the value of the
# inverse in the cache using the setinverse function.
cacheSolve <- function(x, ...) {
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached inverse")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
cacheSolve(X) - solve(x)
cacheSolve(X)
m
cacheSolve(X)
# This program will illustrate how to use R's caching ability to store the results of
# potentially time-consuming operations and then retrieve these results from the cache
# in lieu of repeating the resource-intensive computation.  We will illustrate this in
# the instance of determining a matrix inverse.
# This first function creates a list containing a function to:
# * set the value of the given matrix
# * get the value of this matrix
# * set the inverse of this matrix
# * get the inverse of this matrix
set.seed(1)
x <- matrix(rnorm(100), 10, 10)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,  setsolve = setsolve, getsolve = getsolve)
}
X <- makeCacheMatrix(x)
# This function produces the inverse of the output from makeCacheMatrix.
# First it checks to see if the inverse has already been calculated and cached.
# If so, it retrieves the inverse from the cache, skips the computation and, when
# run interactively, prints a message to that effect.
# Otherwise, it calculates the inverse of the matrix and sets the value of the
# inverse in the cache using the setinverse function.
cacheSolve <- function(x, ...) {
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached inverse")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
cacheSolve(X) - solve(x)
# This program will illustrate how to use R's caching ability to store the results of
# potentially time-consuming operations and then retrieve these results from the cache
# in lieu of repeating the resource-intensive computation.  We will illustrate this in
# the instance of determining a matrix inverse.
# This first function creates a list containing a function to:
# * set the value of the given matrix
# * get the value of this matrix
# * set the inverse of this matrix
# * get the inverse of this matrix
set.seed(1)
x <- matrix(rnorm(100), 10, 10)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,  setsolve = setsolve, getsolve = getsolve)
}
X <- makeCacheMatrix(x)
# This function produces the inverse of the output from makeCacheMatrix.
# First it checks to see if the inverse has already been calculated and cached.
# If so, it retrieves the inverse from the cache, skips the computation and, when
# run interactively, prints a message to that effect.
# Otherwise, it calculates the inverse of the matrix and sets the value of the
# inverse in the cache using the setinverse function.
cacheSolve <- function(x, ...) {
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached inverse")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
cacheSolve(X) - solve(x)
# This program will illustrate how to use R's caching ability to store the results of
# potentially time-consuming operations and then retrieve these results from the cache
# in lieu of repeating the resource-intensive computation.  We will illustrate this in
# the instance of determining a matrix inverse.
# This first function creates a list containing a function to:
# * set the value of the given matrix
# * get the value of this matrix
# * set the inverse of this matrix
# * get the inverse of this matrix
set.seed(1)
x <- matrix(rnorm(100), 10, 10)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,  setsolve = setsolve, getsolve = getsolve)
}
X <- makeCacheMatrix(x)
# This function produces the inverse of the output from makeCacheMatrix.
# First it checks to see if the inverse has already been calculated and cached.
# If so, it retrieves the inverse from the cache, skips the computation and, when
# run interactively, prints a message to that effect.
# Otherwise, it calculates the inverse of the matrix and sets the value of the
# inverse in the cache using the setinverse function.
cacheSolve <- function(x, ...) {
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached inverse")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
cacheSolve(X) - solve(x)
# This program illustrates how to use R's caching ability to store the results of
# the potentially time-consuming matrix inversion operation and retrieve these results
# from the cache in lieu of repeating the computation.
# This function creates a list containing a function to:
# * set the value of the given matrix
# * get the value of this matrix
# * set the inverse of this matrix
# * get the inverse of this matrix
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,  setsolve = setsolve, getsolve = getsolve)
}
# This function produces the inverse of the output from makeCacheMatrix.
# First it checks to see if the inverse has already been calculated and cached.
# If so, it retrieves the inverse from the cache, skips the computation and, when
# run interactively, prints a message to that effect.
# Otherwise, it calculates the inverse of the matrix and sets the value of the
# inverse in the cache using the setsolve function.
cacheSolve <- function(x, ...) {
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached inverse")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
# This program illustrates how to use R's caching ability to store the results of
# the potentially time-consuming matrix inversion operation and retrieve these results
# from the cache in lieu of repeating the computation.
# This function creates a list containing a function to:
# * set the value of the given matrix
# * get the value of this matrix
# * set the inverse of this matrix
# * get the inverse of this matrix
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,  setsolve = setsolve, getsolve = getsolve)
}
# This function produces the inverse of the output from makeCacheMatrix.
# First it checks to see if the inverse has already been calculated and cached.
# If so, it retrieves the inverse from the cache, skips the computation and, when
# run interactively, prints a message to that effect.
# Otherwise, it calculates the inverse of the matrix and sets the value of the
# inverse in the cache using the setsolve function.
cacheSolve <- function(x, ...) {
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached inverse")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
